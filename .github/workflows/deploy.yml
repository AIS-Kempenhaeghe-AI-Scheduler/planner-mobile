name: "Auto Deploy with Version Bump"

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: "Skip tests"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_name: ${{ steps.bump.outputs.version_name }}
      build_number: ${{ steps.bump.outputs.build_number }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if deployment needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | tr -d '\r')
          VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: bump
        run: |
          CURRENT_VERSION="${{ steps.current.outputs.version_name }}"
          CURRENT_BUILD="${{ steps.current.outputs.build_number }}"
          
          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Determine version bump type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version_type }}"
          else
            # Auto-determine bump type based on commit messages
            if git log --pretty=format:"%s" -1 | grep -i "breaking\|major"; then
              BUMP_TYPE="major"
            elif git log --pretty=format:"%s" -1 | grep -i "feat\|feature\|minor"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Bump type: $BUMP_TYPE"
          
          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          # Increment build number
          NEW_BUILD=$((CURRENT_BUILD + 1))
          NEW_VERSION_NAME="$MAJOR.$MINOR.$PATCH"
          NEW_VERSION="$NEW_VERSION_NAME+$NEW_BUILD"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$NEW_BUILD" >> $GITHUB_OUTPUT
          
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          
          # Verify the change
          grep '^version:' pubspec.yaml

      - name: Commit version bump
        if: steps.check.outputs.should_deploy == 'true'
        run: |
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
          git push origin ${{ github.ref_name }}

  build-and-deploy:
    name: Build and Deploy APK
    runs-on: ubuntu-latest
    needs: version-bump
    if: needs.version-bump.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: gradle

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.3"
          channel: "stable"
          cache: true

      - name: Set Working Directory
        run: |
          if [ -d "frontend" ]; then
            echo "WORKDIR=frontend" >> $GITHUB_ENV
            echo "ANDROID_DIR=frontend/android" >> $GITHUB_ENV
          else
            echo "WORKDIR=." >> $GITHUB_ENV
            echo "ANDROID_DIR=android" >> $GITHUB_ENV
          fi

      - name: Install Flutter Dependencies
        working-directory: ${{ env.WORKDIR }}
        run: flutter pub get

      - name: Run Tests
        if: github.event.inputs.skip_tests != 'true'
        working-directory: ${{ env.WORKDIR }}
        run: flutter test

      - name: Setup Local Properties
        run: |
          mkdir -p ${{ env.ANDROID_DIR }}
          echo "flutter.sdk=$FLUTTER_HOME" > ${{ env.ANDROID_DIR }}/local.properties

      - name: Setup Keystore
        run: |
          mkdir -p ${{ env.ANDROID_DIR }}/app
          
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{ env.ANDROID_DIR }}/app/keystore.jks
            echo "storeFile=../app/keystore.jks" > ${{ env.ANDROID_DIR }}/key.properties
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "Using production keystore"
          else
            keytool -genkeypair -v -keystore ${{ env.ANDROID_DIR }}/app/debug.keystore \
              -storepass android -alias androiddebugkey -keypass android \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US"
            echo "storeFile=../app/debug.keystore" > ${{ env.ANDROID_DIR }}/key.properties
            echo "keyAlias=androiddebugkey" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "storePassword=android" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "keyPassword=android" >> ${{ env.ANDROID_DIR }}/key.properties
            echo "Using debug keystore"
          fi

      - name: Build Release APK
        working-directory: ${{ env.WORKDIR }}
        run: |
          flutter build apk --release --verbose
          
      - name: Build App Bundle
        working-directory: ${{ env.WORKDIR }}
        run: flutter build appbundle --release

      - name: Rename APK with version
        run: |
          APK_PATH="${{ env.WORKDIR }}/build/app/outputs/flutter-apk/app-release.apk"
          AAB_PATH="${{ env.WORKDIR }}/build/app/outputs/bundle/release/app-release.aab"
          
          NEW_APK_NAME="ai-scheduling-app-v${{ needs.version-bump.outputs.version_name }}.apk"
          NEW_AAB_NAME="ai-scheduling-app-v${{ needs.version-bump.outputs.version_name }}.aab"
          
          cp "$APK_PATH" "${{ env.WORKDIR }}/build/app/outputs/flutter-apk/$NEW_APK_NAME"
          cp "$AAB_PATH" "${{ env.WORKDIR }}/build/app/outputs/bundle/release/$NEW_AAB_NAME"
          
          echo "APK_FILE=${{ env.WORKDIR }}/build/app/outputs/flutter-apk/$NEW_APK_NAME" >> $GITHUB_ENV
          echo "AAB_FILE=${{ env.WORKDIR }}/build/app/outputs/bundle/release/$NEW_AAB_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-builds-v${{ needs.version-bump.outputs.version_name }}
          path: |
            ${{ env.APK_FILE }}
            ${{ env.AAB_FILE }}
          retention-days: 30

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: "${{ env.APK_FILE }},${{ env.AAB_FILE }}"
          tag: "v${{ needs.version-bump.outputs.version_name }}"
          name: "AI Scheduling App v${{ needs.version-bump.outputs.version_name }}"
          body: |
            ## üöÄ AI Scheduling App v${{ needs.version-bump.outputs.version_name }}
            
            **Build Number:** ${{ needs.version-bump.outputs.build_number }}
            **Release Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ### üì± Downloads
            - **APK**: Direct installation file for Android devices
            - **AAB**: App Bundle for Google Play Store
            
            ### üîß Installation
            1. Download the APK file
            2. Enable "Install from unknown sources" in your Android settings
            3. Install the APK file
            
            ### üìù Changes
            - Latest features and improvements
            - Bug fixes and performance enhancements
            - Updated dependencies
            
            ### üîí Security
            This release is signed with our production certificate.
            
            ---
            *Generated automatically by GitHub Actions*
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: ${{ github.ref == 'refs/heads/main' }}

      - name: Notify Success
        run: |
          echo "‚úÖ Successfully deployed AI Scheduling App v${{ needs.version-bump.outputs.version_name }}"
          echo "üì¶ APK: ${{ env.APK_FILE }}"
          echo "üì¶ AAB: ${{ env.AAB_FILE }}"
          echo "üè∑Ô∏è Tag: v${{ needs.version-bump.outputs.version_name }}"

  test-only:
    name: Test Build (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: gradle

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.3"
          channel: "stable"
          cache: true

      - name: Set Working Directory
        run: |
          if [ -d "frontend" ]; then
            echo "WORKDIR=frontend" >> $GITHUB_ENV
          else
            echo "WORKDIR=." >> $GITHUB_ENV
          fi

      - name: Install Flutter Dependencies
        working-directory: ${{ env.WORKDIR }}
        run: flutter pub get

      - name: Run Tests
        working-directory: ${{ env.WORKDIR }}
        run: flutter test

      - name: Analyze Code
        working-directory: ${{ env.WORKDIR }}
        run: flutter analyze

      - name: Check Formatting
        working-directory: ${{ env.WORKDIR }}
        run: dart format --set-exit-if-changed .

      - name: Test Build APK
        working-directory: ${{ env.WORKDIR }}
        run: flutter build apk --debug --verbose
